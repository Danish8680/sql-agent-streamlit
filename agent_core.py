# agent_core.py
# suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

from langchain_community.llms import Ollama
from langchain.agents import AgentType
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_community.agent_toolkits import create_sql_agent

# --- Ollama LLM Setup ---
# Ensure Ollama is running and has the model downloaded (e.g., 'mistral:7b-instruct')
# Using mistral:7b-instruct based on your preference and system specs.
llm = Ollama(model="mistral:7b-instruct", temperature=0.75)

# --- MySQL Database Connector ---
# IMPORTANT: Replace with your MySQL details
import os

mysql_username = os.getenv("MYSQL_USER", "root")
mysql_password = os.getenv("MYSQL_PASSWORD", "root")
mysql_host = os.getenv("MYSQL_HOST", "localhost")
mysql_port = os.getenv("MYSQL_PORT", "3306")
database_name = os.getenv("MYSQL_DATABASE", "Chinook")


mysql_uri = f'mysql+mysqlconnector://{mysql_username}:{mysql_password}@{mysql_host}:{mysql_port}/{database_name}'
db = SQLDatabase.from_uri(mysql_uri)

# --- Create SQL Agent ---
agent_executor = create_sql_agent(
    llm=llm,
    db=db,
    verbose=True, # Keep verbose for seeing the chain in PyCharm's console if you run streamlit in terminal
    handle_parsing_errors=True,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION
)

def get_sql_agent_response(prompt: str) -> str:
    """
    Invokes the SQL agent.
    """
    if not prompt:
        return "Please enter a question."
    try:
        # final answer is in 'output'
        response = agent_executor.invoke({"input": prompt})
        return response.get('output', 'No answer found.')
    except Exception as e:
        return f"An error occurred: {e}\nPlease ensure your MySQL server is running and accessible, and Ollama is running with the specified model."
